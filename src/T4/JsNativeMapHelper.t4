<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System"#>
<#@ include file="T4CSHelper.t4"#>
<#+
public class JsNativeMapBuilder{
	List<string> csFileList_=new List<string>();
	public string Namespace{get;set;}="BLL";
	public string ProjectName{get;set;}="";	
	public void AddCsFile(string path){
		csFileList_.Add(ProjectName+path);
	}
	public string Build(EnvDTE.DTE theDTE){
		var project=DTEHelper.GetProject(theDTE,this.ProjectName);
		var pro=project.Properties.Item("AssemblyName");
		var assemblyName=pro.Value.ToString();
		StringBuilder strBuilder=new StringBuilder();
		strBuilder.Append("namespace ").Append(this.Namespace).AppendLine("{");
		foreach(var csFile in csFileList_){
			var item=DTEHelper.GetItem(theDTE,csFile);			
			if(item==null) throw new Exception("未找到项目项");
			var codeModel=new CodeModel(item.FileCodeModel);
			var constructorInfoList=new List<string>();
			codeModel.ProcessConstructor((funcInfo)=>{
				if(funcInfo.ParamList.Count!=0){
					constructorInfoList.Insert(0,$"@Tnelab.ConstructorInfo({string.Join(",",funcInfo.ParamList.Select(it=>"\""+it.TypeName+"\"").ToArray())})");
				}
				else{
					constructorInfoList.Insert(0,$"@Tnelab.ConstructorInfo()");
				}
			});
			strBuilder.AppendLine(String.Join("\r\n",constructorInfoList.Select(it=>$"\t{it}").ToArray()));
			strBuilder.AppendLine($"\t@Tnelab.ToMap(\"{this.Namespace}.{codeModel.ClassName}\",\"{codeModel.NamespaceName}.{codeModel.ClassName}\")");
			strBuilder.AppendLine($"\texport class {codeModel.ClassName} extends Tnelab.NativeObject {{");
			codeModel.ProcessProperty((propInfo)=>{
				if(propInfo.HasSet){
					strBuilder.AppendLine($"\t\t@Tnelab.InvokeInfo(undefined,\"{propInfo.TypeName}\")");
					strBuilder.AppendLine($"\t\tpublic set {propInfo.Name}(value:{getJsTypeNameByTypeName(propInfo.TypeName)}) {{ }}");
				}
				if(propInfo.HasGet){
					strBuilder.AppendLine($"\t\tpublic get {propInfo.Name}():{getJsTypeNameByTypeName(propInfo.TypeName)} {{ return undefined; }}");
				}
			});
			codeModel.ProcessFunction((funcInfoList)=>{
				if(funcInfoList.Count>1){
					var invokeInfoList=new List<string>();
					foreach(var funcInfo in funcInfoList){
						if(funcInfo.ParamList.Count!=0){
							invokeInfoList.Insert(0,$"@Tnelab.InvokeInfo(\"{funcInfo.Name}\", {string.Join(",",funcInfo.ParamList.Select(it=>"\""+it.TypeName+"\"").ToArray())})");
						}
						else{
							invokeInfoList.Insert(0,$"@Tnelab.InvokeInfo(\"{funcInfo.Name}\")");
						}
						funcInfo.ParamList.Insert(0,new CodeParamInfo(){Name="tneMapId",TypeName="System.Int32"});
						if(funcInfo.GenericTypeArguments.Count>0){
							funcInfo.ParamList.Insert(1,new CodeParamInfo(){Name="tneMapGenericTypeInfo",TypeName="System.String"});
						}
						strBuilder.AppendLine($"\t\tpublic {funcInfo.Name}({string.Join(",",funcInfo.ParamList.Select(it=>$"{it.Name}:{getJsTypeNameByTypeName(it.TypeName,codeModel.GenericTypeArguments,funcInfo.GenericTypeArguments)}"))}):{getJsTypeNameByTypeName(funcInfo.ReturnTypeName,codeModel.GenericTypeArguments,funcInfo.GenericTypeArguments)};");
					}
					strBuilder.AppendLine(String.Join("\r\n",invokeInfoList.Select(it=>$"\t\t{it}").ToArray()));
 					strBuilder.AppendLine($"\t\tpublic {funcInfoList[0].ShortName}(tneMapId:number):any{{}}");
				}
				else{
					var funcInfo=funcInfoList[0];
					if(funcInfo.ParamList.Count!=0){
						strBuilder.AppendLine($"\t\t@Tnelab.InvokeInfo(\"{funcInfo.Name}\", {string.Join(",",funcInfo.ParamList.Select(it=>"\""+it.TypeName+"\"").ToArray())})");
					}
					else{
						strBuilder.AppendLine($"\t\t@Tnelab.InvokeInfo(\"{funcInfo.Name}\")");
					}
					if(funcInfo.GenericTypeArguments.Count>0){
						funcInfo.ParamList.Insert(0,new CodeParamInfo(){Name="tneMapGenericTypeInfo",TypeName="System.String"});
					}
					strBuilder.AppendLine($"\t\tpublic {funcInfo.Name}({string.Join(",",funcInfo.ParamList.Select(it=>$"{it.Name}:{getJsTypeNameByTypeName(it.TypeName,codeModel.GenericTypeArguments,funcInfo.GenericTypeArguments)}"))}):{getJsTypeNameByTypeName(funcInfo.ReturnTypeName,codeModel.GenericTypeArguments,funcInfo.GenericTypeArguments)} {(funcInfo.ReturnTypeName=="System.Void"?"{}":"{return undefined;}")}");
				}
			});
			if(codeModel.CodeConstructorList.Count>1){
				foreach(var funcInfo in codeModel.CodeConstructorList){
					funcInfo.ParamList.Insert(0,new CodeParamInfo(){Name="tneMapId",TypeName="System.Int32"});
					if(codeModel.GenericTypeArguments.Count>0){
						funcInfo.ParamList.Insert(1,new CodeParamInfo(){Name="tneMapGenericTypeInfo",TypeName="System.String"});
					}
					strBuilder.AppendLine($"\t\tpublic constructor({string.Join(",",funcInfo.ParamList.Select(it=>$"{it.Name}:{getJsTypeNameByTypeName(it.TypeName,codeModel.GenericTypeArguments,funcInfo.GenericTypeArguments)}"))});");
				}
 				strBuilder.AppendLine($"\t\tpublic constructor(...arg: any[]){{super(...arg);}}");
			}
			else{
				var funcInfo=codeModel.CodeConstructorList[0];
				if(codeModel.GenericTypeArguments.Count>0){
					funcInfo.ParamList.Insert(0,new CodeParamInfo(){Name="tneMapGenericTypeInfo",TypeName="System.String"});
				}
				strBuilder.AppendLine($"\t\tpublic constructor({string.Join(",",funcInfo.ParamList.Select(it=>$"{it.Name}:{getJsTypeNameByTypeName(it.TypeName,codeModel.GenericTypeArguments,funcInfo.GenericTypeArguments)}"))}) {{super(arguments);}}");
			}
			strBuilder.AppendLine("\t}");
		}
		strBuilder.AppendLine("}");
		return strBuilder.ToString();
	}
    string getJsTypeNameByTypeName(string tName,List<string> classGenericTypeArguments=null,List<string> funcGenericTypeArguments=null)
	{
		tName=tName.Trim();
		if(funcGenericTypeArguments!=null&&funcGenericTypeArguments.Count!=0){
			if(funcGenericTypeArguments.Count(it=>it==tName)!=0){
				return tName;
			}
		}
		if(classGenericTypeArguments!=null&&classGenericTypeArguments.Count!=0){
			if(classGenericTypeArguments.Count(it=>it==tName)!=0){
				return tName;
			}
		}
	    string gv = "any";
	    switch (tName)
	    {
	        case "System.Char":
	        case "System.String":
	            gv = "string";
	            break;
	        case "System.Int16":
	        case "System.UInt16":
	        case "System.Int32":
	        case "System.UInt32":
	        case "System.Int64":
	        case "System.UInt64":
	        case "System.Double":
	        case "System.Decimal":
	        case "System.Single":	        
	        case "System.Byte":
	        case "System.SByte":
	            gv = "number";
	            break;
			case "System.Boolean":
				gv="boolean";
				break;
			case "System.Void":
				gv="void";
				break;
	    }
		if(gv=="any"){
			if(tName.StartsWith("System.Action")){
				if(tName.IndexOf("<")==-1){
					gv="()=>void";
				}
				else{
					var gvd=tName.Replace("System.Action<","").Replace(">","").Split(',');
					for(var i=0;i<gvd.Length;i++){						
						gvd[i]=$"arg{i}:{getJsTypeNameByTypeName(gvd[i],classGenericTypeArguments,funcGenericTypeArguments)}";
					}
					gv=$"({String.Join(",",gvd)})=>void";
				}
				//gv="Function";
			}
			else if(tName.StartsWith("System.Func")){
					var gvd=tName.Replace("System.Func<","").Replace(">","").Split(',');
					var paramTypes=new string[gvd.Length-1];
					var returnType=gvd[gvd.Length-1];
					for(var i=0;i<gvd.Length-1;i++){						
						paramTypes[i]=$"arg{i}:{getJsTypeNameByTypeName(gvd[i],classGenericTypeArguments,funcGenericTypeArguments)}";
					}
					gv=$"({String.Join(",",paramTypes)})=>{getJsTypeNameByTypeName(returnType,classGenericTypeArguments,funcGenericTypeArguments)}";
			}
		}
	    return gv;
	}
}
#>
